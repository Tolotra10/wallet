import express from "express";
import { MvolaService } from "../services/mvola.service.js";
import { authenticateUser,requireKYC,requireActiveWallet } from "../middleware/auth.js";
import { sequelize, Wallet, Transaction } from "../models/index.js";

const router = express.Router();
const mvola = new MvolaService();

//Wallet ‚Üí Mvola
router.post(
  "/deposit",
  authenticateUser,
  requireKYC,
  requireActiveWallet,
  async (req, res) => {
    const t = await sequelize.transaction(); // D√©but de la transaction Sequelize

    try {
      const { phone, amount } = req.body;

      if (!phone || !amount) {
        return res.status(400).json({ message: "Num√©ro et montant requis" });
      }

      // 1Ô∏è‚É£ V√©rifier la balance du wallet
      const wallet = await Wallet.findOne({ where: { user_id: req.user.id }, transaction: t, lock: t.LOCK.UPDATE });
      if (!wallet || wallet.balance < amount) {
        await t.rollback();
        return res.status(400).json({ message: "Solde insuffisant" });
      }

      // 2Ô∏è‚É£ Initier le paiement Mvola
      const result = await mvola.requestToPay(amount, phone, "Transfert Wallet ‚Üí Mvola");

      // 3Ô∏è‚É£ D√©biter le wallet
      wallet.balance -= amount;
      await wallet.save({ transaction: t });

      // 4Ô∏è‚É£ Enregistrer la transaction
      const transactionRecord = await Transaction.create({
        user_id: req.user.id,
        wallet_id: wallet.id,
        amount,
        description: "Transfert Wallet ‚Üí Mvola",
        type: "credit",
        provider: "mvola",
        category: "transfer",
        phone,
        status: "pending",
        external_reference: result.transactionId,
      }, { transaction: t });

      // ‚úÖ Commit de la transaction
      await t.commit();

      res.json({
        message: "Transaction initi√©e avec succ√®s",
        transactionId: transactionRecord.id,
        mvolaTransactionId: result.transactionId,
        mvolaResponse: result.data,
      });
    } catch (error) {
      // üî¥ Rollback en cas d'erreur
      await t.rollback();
      res.status(500).json({ message: error.message });
    }
  }
);

// Mvola ‚Üí Wallet
router.post(
  "/topup",
  authenticateUser,
  requireKYC,
  async (req, res) => {
    const t = await sequelize.transaction();

    try {
      const { phone, amount } = req.body;

      if (!phone || !amount) {
        return res.status(400).json({ message: "Num√©ro et montant requis" });
      }

      // 1Ô∏è‚É£ Initier paiement Mvola vers notre wallet (ex: request-to-pay)
      const result = await mvola.requestToPay(amount, phone, "D√©p√¥t Mvola ‚Üí Wallet");

      // 2Ô∏è‚É£ Cr√©diter le wallet
      const wallet = await Wallet.findOne({ where: { user_id: req.user.id }, transaction: t, lock: t.LOCK.UPDATE });
      if (!wallet) {
        await t.rollback();
        return res.status(404).json({ message: "Wallet introuvable" });
      }

      wallet.balance += amount;
      await wallet.save({ transaction: t });

      // 3Ô∏è‚É£ Cr√©er la transaction
      const transactionRecord = await Transaction.create({
        user_id: req.user.id,
        wallet_id: wallet.id,
        amount,
        description: "D√©p√¥t Mvola ‚Üí Wallet",
        type: "credit",                  // üî• wallet re√ßoit de l‚Äôargent
        provider: "mvola",
        phone,
        status: "pending",
        category: "mvola_to_wallet",     // cat√©gorie pr√©cise
        external_reference: result.transactionId,
      }, { transaction: t });

      await t.commit();

      res.json({
        message: "D√©p√¥t initi√© avec succ√®s",
        transactionId: transactionRecord.id,
        mvolaTransactionId: result.transactionId,
        mvolaResponse: result.data,
      });
    } catch (error) {
      await t.rollback();
      res.status(500).json({ message: error.message });
    }
  }
);


export default router;
